{"version":3,"file":"index.modern.mjs","sources":["../src/resolver/blocks.ts","../src/resolver/mark.ts","../src/index.ts"],"sourcesContent":["import { CodeAttributes, HeadingAttributes, ImageAttributes } from '@marvr/storyblok-rich-text-types'\nimport { FunctionComponent, ReactNode, createElement } from 'react'\n\nexport type StoryblokRichtextContentType =\n  | \"heading\"\n  | \"code_block\"\n  | \"paragraph\"\n  | \"blockquote\"\n  | \"ordered_list\"\n  | \"bullet_list\"\n  | \"list_item\"\n  | \"horizontal_rule\"\n  | \"hard_break\"\n  | \"image\"\n  | \"blok\";\n\nconst simpleNodeResolver = (element: string | FunctionComponent) => (children: ReactNode): JSX.Element | null =>\n  children != null ? createElement(element, null, children) : null\n\nconst emptyNodeResolver = (element: string | FunctionComponent) => (): JSX.Element | null =>\n  createElement(element)\n\nexport const defaultBlocksResolvers = {\n  doc: simpleNodeResolver('div'),\n  heading: (children: ReactNode, attrs: HeadingAttributes): JSX.Element | null =>\n    createElement(`h${attrs.level}`, null, children),\n  code_block: (children: ReactNode, attrs: CodeAttributes): JSX.Element | null =>\n    createElement('pre', null, createElement('code', { className: attrs.class }, children)),\n  image: (children: ReactNode, attrs: ImageAttributes): JSX.Element | null =>\n    createElement('img', attrs, children),\n  paragraph: simpleNodeResolver('p'),\n  blockquote: simpleNodeResolver('blockquote'),\n  ordered_list: simpleNodeResolver('ol'),\n  bullet_list: simpleNodeResolver('ul'),\n  list_item: simpleNodeResolver('li'),\n  horizontal_rule: emptyNodeResolver('hr'),\n  hard_break: emptyNodeResolver('br')\n}\n","import { LinkAttributes as LA, StyledAttributes } from '@marvr/storyblok-rich-text-types'\nimport { ReactNode, createElement, FC } from 'react'\n\ntype LinkAttributes = LA & {\n  anchor?: string\n}\n\nexport type StoryblokRichtextMark =\n  | \"bold\"\n  | \"italic\"\n  | \"strike\"\n  | \"underline\"\n  | \"code\"\n  | \"link\"\n  | \"styled\";\n\nconst simpleMarkResolver = (element: string | FC) => (children: ReactNode): JSX.Element | null =>\n  createElement(element, null, children)\n\nexport const defaultMarkResolvers = {\n  link: (children: ReactNode, { href, linktype, target }: LinkAttributes): JSX.Element | null =>\n    createElement('a', {\n      href: linktype === 'email' ? `mailto:${href}` : href,\n      target\n    }, children),\n  styled: (children: ReactNode, attrs: StyledAttributes): JSX.Element | null =>\n    createElement('span', { className: attrs.class }, children),\n  bold: simpleMarkResolver('b'),\n  strong: simpleMarkResolver('strong'),\n  italic: simpleMarkResolver('i'),\n  strike: simpleMarkResolver('s'),\n  underline: simpleMarkResolver('u'),\n  code: simpleMarkResolver('code'),\n  textStyle: (children: ReactNode, {color}: {color: string}): JSX.Element | null =>\n    createElement('span', { style: `color: ${color} !important` }, children),\n}\n","import React, { ReactNode } from 'react'\nimport { defaultBlocksResolvers, StoryblokRichtextContentType } from './resolver/blocks'\nimport { defaultMarkResolvers, StoryblokRichtextMark } from './resolver/mark'\n\ntype StoryblokRichtextContent = {\n  type: StoryblokRichtextContentType;\n  attrs?: {\n    level?: number;\n    class?: string;\n    src?: string;\n    alt?: string;\n    title?: string;\n    order?: number;\n    body?: Array<{\n      _uid: string;\n    }>;\n  };\n  marks?: {\n    type: StoryblokRichtextMark;\n    attrs?: {\n      linktype?: string;\n      href?: string;\n      target?: string;\n      anchor?: string;\n      uuid?: string;\n      class?: string;\n    };\n  }[];\n  text?: string;\n  content: StoryblokRichtextContent[];\n};\n\nexport type StoryblokRichtext = {\n  type: 'doc';\n  content: StoryblokRichtextContent[];\n};\n\nexport { Mark, Block } from '@marvr/storyblok-rich-text-types'\n\nexport type RenderOptionsProps = {\n  blokResolvers?: {\n    [k: string]: (props: any) => JSX.Element | null\n  }\n  defaultBlokResolver?: (name: string, props: any) => JSX.Element | null\n  nodeResolvers?: Partial<typeof defaultBlocksResolvers>\n  markResolvers?: Partial<typeof defaultMarkResolvers>\n  defaultStringResolver?: (str: string) => JSX.Element\n}\n\nexport const render = (document: StoryblokRichtext | any, options?: RenderOptionsProps): ReactNode | null => {\n  if (document?.type === 'doc' && Array.isArray(document?.content)) {\n    const {\n      blokResolvers = {},\n      defaultBlokResolver = () => null,\n      nodeResolvers: customNodeResolvers = {},\n      markResolvers: customMarkResolvers = {}\n    } = options ?? {}\n    const nodeResolvers: any = {\n      ...defaultBlocksResolvers,\n      ...customNodeResolvers\n    }\n\n    const markResolvers: any = {\n      ...defaultMarkResolvers,\n      ...customMarkResolvers\n    }\n\n    let currentKey = 0\n\n    const addKey = (element: any) =>\n      React.isValidElement(element)\n        ? React.cloneElement(element, { key: currentKey++ })\n        : element\n\n    const renderNodes = (nodes: any) => {\n      const elements = nodes\n        ? nodes.map(renderNode).filter((node: any) => node != null)\n        : null\n      return Array.isArray(elements) && elements.length === 0\n        ? null\n        : elements\n    }\n\n    const renderNode = (node: any) => {\n      if (node.type === 'blok') {\n        const { body } = node.attrs\n        return body.map(({ component, ...props }: any) => {\n          const resolver = blokResolvers[component]\n          const element = resolver\n            ? resolver(props)\n            : defaultBlokResolver(component, props)\n          return addKey(element)\n        })\n      } else {\n        let childNode\n        if (node.type === 'text') {\n          childNode = node.text\n        } else {\n          const resolver = nodeResolvers[node.type]\n          childNode = resolver\n            ? addKey(resolver(renderNodes(node.content), node.attrs))\n            : null\n        }\n        const marks = node.marks ?? []\n        return marks.reduceRight((children: any, mark: any) => {\n          const resolver = markResolvers[mark.type]\n          return resolver\n            ? addKey(resolver(children, mark.attrs))\n            : children\n        }, childNode)\n      }\n    }\n\n    return renderNodes(document.content)\n  } else if (typeof document === 'string') {\n    return options?.defaultStringResolver ? options.defaultStringResolver(document) : document\n  }\n  return null\n}\n"],"names":["element","children","createElement","emptyNodeResolver","defaultBlocksResolvers","doc","simpleNodeResolver","heading","attrs","level","code_block","className","class","image","paragraph","blockquote","ordered_list","bullet_list","list_item","horizontal_rule","hard_break","simpleMarkResolver","defaultMarkResolvers","link","href","linktype","target","styled","bold","strong","italic","strike","underline","code","textStyle","color","style","render","document","options","type","Array","isArray","content","blokResolvers","defaultBlokResolver","nodeResolvers","customNodeResolvers","markResolvers","customMarkResolvers","currentKey","addKey","React","isValidElement","cloneElement","key","renderNodes","nodes","elements","map","renderNode","filter","node","length","body","_ref","component","props","resolver","_node$marks","childNode","text","marks","reduceRight","mark","defaultStringResolver"],"mappings":"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"}