{"version":3,"file":"index.js","sources":["../src/resolver/blocks.ts","../src/resolver/mark.ts","../src/index.ts"],"sourcesContent":["import { CodeAttributes, HeadingAttributes, ImageAttributes } from '@marvr/storyblok-rich-text-types'\nimport { FunctionComponent, ReactNode, createElement } from 'react'\n\nexport type StoryblokRichtextContentType =\n  | \"heading\"\n  | \"code_block\"\n  | \"paragraph\"\n  | \"blockquote\"\n  | \"ordered_list\"\n  | \"bullet_list\"\n  | \"list_item\"\n  | \"horizontal_rule\"\n  | \"hard_break\"\n  | \"image\"\n  | \"blok\";\n\nconst simpleNodeResolver = (element: string | FunctionComponent) => (children: ReactNode): JSX.Element | null =>\n  children != null ? createElement(element, null, children) : null\n\nconst emptyNodeResolver = (element: string | FunctionComponent) => (): JSX.Element | null =>\n  createElement(element)\n\nexport const defaultBlocksResolvers = {\n  doc: simpleNodeResolver('div'),\n  heading: (children: ReactNode, attrs: HeadingAttributes): JSX.Element | null =>\n    createElement(`h${attrs.level}`, null, children),\n  code_block: (children: ReactNode, attrs: CodeAttributes): JSX.Element | null =>\n    createElement('pre', null, createElement('code', { className: attrs.class }, children)),\n  image: (children: ReactNode, attrs: ImageAttributes): JSX.Element | null =>\n    createElement('img', attrs, children),\n  paragraph: simpleNodeResolver('p'),\n  blockquote: simpleNodeResolver('blockquote'),\n  ordered_list: simpleNodeResolver('ol'),\n  bullet_list: simpleNodeResolver('ul'),\n  list_item: simpleNodeResolver('li'),\n  horizontal_rule: emptyNodeResolver('hr'),\n  hard_break: emptyNodeResolver('br')\n}\n","import { LinkAttributes as LA, StyledAttributes } from '@marvr/storyblok-rich-text-types'\nimport { ReactNode, createElement, FC } from 'react'\n\ntype LinkAttributes = LA & {\n  anchor?: string\n}\n\nexport type StoryblokRichtextMark =\n  | \"bold\"\n  | \"italic\"\n  | \"strike\"\n  | \"underline\"\n  | \"code\"\n  | \"link\"\n  | \"styled\";\n\nconst simpleMarkResolver = (element: string | FC) => (children: ReactNode): JSX.Element | null =>\n  createElement(element, null, children)\n\nexport const defaultMarkResolvers = {\n  link: (children: ReactNode, { href, linktype, target }: LinkAttributes): JSX.Element | null =>\n    createElement('a', {\n      href: linktype === 'email' ? `mailto:${href}` : href,\n      target\n    }, children),\n  styled: (children: ReactNode, attrs: StyledAttributes): JSX.Element | null =>\n    createElement('span', { className: attrs.class }, children),\n  bold: simpleMarkResolver('b'),\n  strong: simpleMarkResolver('strong'),\n  italic: simpleMarkResolver('i'),\n  strike: simpleMarkResolver('s'),\n  underline: simpleMarkResolver('u'),\n  code: simpleMarkResolver('code'),\n  textStyle: (children: ReactNode, {color}: {color: string}): JSX.Element | null =>\n    createElement('span', { style: `color: ${color} !important` }, children),\n}\n","import React, { ReactNode } from 'react'\nimport { defaultBlocksResolvers, StoryblokRichtextContentType } from './resolver/blocks'\nimport { defaultMarkResolvers, StoryblokRichtextMark } from './resolver/mark'\n\ntype StoryblokRichtextContent = {\n  type: StoryblokRichtextContentType;\n  attrs?: {\n    level?: number;\n    class?: string;\n    src?: string;\n    alt?: string;\n    title?: string;\n    order?: number;\n    body?: Array<{\n      _uid: string;\n    }>;\n  };\n  marks?: {\n    type: StoryblokRichtextMark;\n    attrs?: {\n      linktype?: string;\n      href?: string;\n      target?: string;\n      anchor?: string;\n      uuid?: string;\n      class?: string;\n    };\n  }[];\n  text?: string;\n  content: StoryblokRichtextContent[];\n};\n\nexport type StoryblokRichtext = {\n  type: 'doc';\n  content: StoryblokRichtextContent[];\n};\n\nexport { Mark, Block } from '@marvr/storyblok-rich-text-types'\n\nexport type RenderOptionsProps = {\n  blokResolvers?: {\n    [k: string]: (props: any) => JSX.Element | null\n  }\n  defaultBlokResolver?: (name: string, props: any) => JSX.Element | null\n  nodeResolvers?: Partial<typeof defaultBlocksResolvers>\n  markResolvers?: Partial<typeof defaultMarkResolvers>\n  defaultStringResolver?: (str: string) => JSX.Element\n}\n\nexport const render = (document: StoryblokRichtext | any, options?: RenderOptionsProps): ReactNode | null => {\n  if (document?.type === 'doc' && Array.isArray(document?.content)) {\n    const {\n      blokResolvers = {},\n      defaultBlokResolver = () => null,\n      nodeResolvers: customNodeResolvers = {},\n      markResolvers: customMarkResolvers = {}\n    } = options ?? {}\n    const nodeResolvers: any = {\n      ...defaultBlocksResolvers,\n      ...customNodeResolvers\n    }\n\n    const markResolvers: any = {\n      ...defaultMarkResolvers,\n      ...customMarkResolvers\n    }\n\n    let currentKey = 0\n\n    const addKey = (element: any) =>\n      React.isValidElement(element)\n        ? React.cloneElement(element, { key: currentKey++ })\n        : element\n\n    const renderNodes = (nodes: any) => {\n      const elements = nodes\n        ? nodes.map(renderNode).filter((node: any) => node != null)\n        : null\n      return Array.isArray(elements) && elements.length === 0\n        ? null\n        : elements\n    }\n\n    const renderNode = (node: any) => {\n      if (node.type === 'blok') {\n        const { body } = node.attrs\n        return body.map(({ component, ...props }: any) => {\n          const resolver = blokResolvers[component]\n          const element = resolver\n            ? resolver(props)\n            : defaultBlokResolver(component, props)\n          return addKey(element)\n        })\n      } else {\n        let childNode\n        if (node.type === 'text') {\n          childNode = node.text\n        } else {\n          const resolver = nodeResolvers[node.type]\n          childNode = resolver\n            ? addKey(resolver(renderNodes(node.content), node.attrs))\n            : null\n        }\n        const marks = node.marks ?? []\n        return marks.reduceRight((children: any, mark: any) => {\n          const resolver = markResolvers[mark.type]\n          return resolver\n            ? addKey(resolver(children, mark.attrs))\n            : children\n        }, childNode)\n      }\n    }\n\n    return renderNodes(document.content)\n  } else if (typeof document === 'string') {\n    return options?.defaultStringResolver ? options.defaultStringResolver(document) : document\n  }\n  return null\n}\n"],"names":["simpleNodeResolver","element","children","createElement","doc","heading","attrs","level","code_block","className","image","paragraph","blockquote","ordered_list","bullet_list","list_item","horizontal_rule","emptyNodeResolver","hard_break","defaultMarkResolvers","link","href","_ref","linktype","target","styled","bold","simpleMarkResolver","strong","italic","strike","underline","code","textStyle","color","style","document","options","type","Array","isArray","content","blokResolvers","_ref$blokResolvers","defaultBlokResolver","_ref$defaultBlokResol","_ref$nodeResolvers","nodeResolvers","_ref$markResolvers","markResolvers","customMarkResolvers","defaultBlocksResolvers","_extends","addKey","isValidElement","React","cloneElement","key","currentKey","renderNodes","nodes","map","renderNode","filter","node","elements","length","_node$marks","childNode","body","_ref2","component","props","_objectWithoutPropertiesLoose","_excluded","resolver","text","marks","reduceRight","mark","defaultStringResolver"],"mappings":"yYAgBA,IAAMA,EAAqB,SAACC,UAAyCC,SAAAA,UACvD,MAAJA,EAAWC,EAAAA,cAAcF,EAAS,KAAMC,GAAY,SAEpC,SAACD,UACzBE,WAAAA,OAAAA,EAAaA,cAACF,OAEsB,CACpCG,IAAKJ,EAAmB,OACxBK,QAAS,SAACH,EAAqBI,UAChBH,gBAAA,IAAKG,EAAMC,MAAS,KAAML,IACzCM,WAAY,SAACN,EAAqBI,GAAtB,OACGH,gBAAC,MAAO,KAAMA,gBAAc,OAAQ,CAAEM,UAAWH,EAAb,OAA4BJ,KAC/EQ,MAAO,SAACR,EAAqBI,GAC3BH,OAAAA,EAAAA,cAAc,MAAOG,EAAOJ,IAC9BS,UAAWX,EAAmB,KAC9BY,WAAYZ,EAAmB,cAC/Ba,aAAcb,EAAmB,MACjCc,YAAad,EAAmB,MAChCe,UAAWf,EAAmB,MAC9BgB,gBAAiBC,EAAkB,MACnCC,WAAYD,EAAkB,SCpBL,SAAChB,GAAyB,OAAA,SAACC,GAAD,SACtCC,cAACF,EAAS,KAAMC,KAEEiB,EAAG,CAClCC,KAAM,SAAClB,SAADmB,EAAAC,EAAwBD,KAAxB,OACSlB,EAAAA,cAAC,IAAK,CACjBkB,KAAmB,UAFaE,EAAAA,SAEOF,UAAAA,EAASA,EAChDG,SAH0CA,QAIzCtB,IACLuB,OAAQ,SAACvB,EAAqBI,GAAtB,OACOH,EAAAA,cAAC,OAAQ,CAAEM,UAAWH,EAAb,OAA4BJ,IACpDwB,KAAMC,EAAmB,KACzBC,OAAQD,EAAmB,UAC3BE,OAAQF,EAAmB,KAC3BG,OAAQH,EAAmB,KAC3BI,UAAWJ,EAAmB,KAC9BK,KAAML,EAAmB,QACzBM,UAAW,SAAC/B,EAAsBgC,GAAvB,OACI/B,gBAAC,OAAQ,CAAEgC,MAAK,YADGD,MACV,eAAyChC,8MCe7C,SAACkC,EAAmCC,GACxD,GAAuB,eAAnBD,OAAAA,EAAAA,EAAUE,OAAkBC,MAAMC,cAAQJ,SAAAA,EAAUK,SAAU,CAChE,IAKIJ,QAAAA,EAAAA,EAAW,GAJbK,EAAAA,EAAAA,cAAAA,OADF,IAAAC,EACkB,GAChBC,EAAAA,EAAAA,EAAAA,oBAAAA,OAAsB,IAAAC,EAAA,WAAA,aAFxBA,EAAAC,EAAAxB,EAGEyB,cAHFC,EAAA1B,EAIE2B,cAAeC,OAJjB,IAAAF,EAIuC,GAEvCA,IACKG,EAAAA,GAAAA,aAJkC,GAHvCL,GAWmBG,EAAAG,EAAA,GACdjC,EACA+B,KAGY,EAEXG,EAAS,SAACpD,GAAD,SACR,QAACqD,eAAerD,GACjBsD,EAAAA,QAAMC,aAAavD,EAAS,CAAEwD,IAAKC,MACnCzD,GAEW0D,EAAG,SAACC,GACnB,MAAiBA,EACbA,EAAMC,IAAIC,GAAYC,OAAO,SAACC,GAAcA,OAAQ,MAARA,IAC5C,KACJ,OAAYzB,MAACC,QAAQyB,IAAiC,IAApBA,EAASC,OACvC,KACAD,KAGa,SAACD,GAEhB,IAQKG,EACLC,EAVF,GAAkB,SAAdJ,EAAK1B,KAEP,OADiB0B,EAAK1D,MAAd+D,KACIR,IAAI,SAAAS,GAAGC,IAAAA,EAAAA,EAAAA,UAAcC,oIAAgBC,CAAAH,EAAAI,GACjCC,EAAGjC,EAAc6B,GACzBtE,EAAU0E,EACZA,EAASH,GACT5B,EAAoB2B,EAAWC,GACnC,SAAcvE,KAIhB,GAAkB,SAAd+D,EAAK1B,KACP8B,EAAYJ,EAAKY,SACZ,CACL,IAAcD,EAAG5B,EAAciB,EAAK1B,MACpC8B,EAAYO,EACRtB,EAAOsB,EAAShB,EAAYK,EAAKvB,SAAUuB,EAAK1D,QAChD,KAGN,OAD4B,SAAd0D,EAAKa,OAASV,EAAA,IACfW,YAAY,SAAC5E,EAAe6E,GACvC,IAAcJ,EAAG1B,EAAc8B,EAAKzC,MACpC,SACIe,EAAOsB,EAASzE,EAAU6E,EAAKzE,QAC/BJ,GACHkE,IAIP,SAAmBhC,EAASK,SACnB,MAAoB,mBACtB,SAAAJ,EAAS2C,sBAAwB3C,EAAQ2C,sBAAsB5C,GAAYA,EAE7E"}